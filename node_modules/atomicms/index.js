'use strict';

var fs = require('fs');
var root = require('app-root-path');
var Mark = require('markup-js');

var templates = {};
var config = {
  key: 'key.json',
  content: '/content',
  template: '/templates',
  organism: '/organisms'
};

var cms = function() {
  return function(req, res, next) {
    var targetTemplate = templates[req.url];
    if(targetTemplate) {
      res.send(targetTemplate.html);
    } else {
      next();
    }
  }
}

cms.init = function(settings) {
  config = settings;
  fs.readFile(root + '/' + config.key, 'utf8', function(err, file) {
    if(err) throw err;

    var data = JSON.parse(file);
    var keys = Object.keys(data);
    keys.forEach(function(key) {
      renderFile(data[key].template, data[key].content, function(data) {
        templates[key] = { html: data };
      });
    })
  });
}

function renderFile(filename, keyname, callback) {
  fs.readFile(root + config.template + '/' + filename, 'utf8', function(err, file) {
    if(err) throw err;

    var template = file;
    fs.readFile(root + config.content + '/' + keyname, 'utf8', function(err, file) {
      if(err) throw err;

      var content = JSON.parse(file);
      var organisms = template.match(/{{.+}}/g);
      organisms = organisms.map(function(o) {
        var matches = o.match(/{{\[?([A-Za-z,\s]+)\]?\s+as\s+([A-Za-z]+)}}/);

        var organism = {
          full: matches[0],
          variable: matches[2]
        }

        organism.organism = matches[1].indexOf(',') === -1 ? matches[1] : matches[1].split(/,\s*/);
        return organism;
      });

      var i = 0;
      organisms.forEach(function(o) {
        markupOrganism(o, function(data) {
          o.markupped = data;
          i++;
          if(i === organisms.length) {
            markupTemplate(template, organisms, function(data) {
              callback(data);
            });
          }
        });
      });

      function markupOrganism(o, cb) {
        var viableContent = content[o.variable];
        var organismPath = '';

        if(typeof o.organism === 'object') {
          organismPath = viableContent.organism || o.organism[0];
        } else {
          organismPath = o.organism;
        }
        fs.readFile(root + config.organism + '/' + organismPath + '.html', 'utf8', function(err, file) {
          if(err) throw err;

          cb(Mark.up(file, viableContent));
        });
      }

      function markupTemplate(template, organisms, cb) {
        var markupped = template;
        organisms.forEach(function(o) {
          //escape characters to prevent misinterpretation by RegExp
          o.full = o.full.split('').map(function(char) {
            if(/[\[\]]/.test(char)) {
              return '\\' + char;
            }
            return char;
          }).join('');
          markupped = markupped.replace(new RegExp(o.full, 'g'), o.markupped);
        });
        cb(markupped);
      }
    });
  })
}
module.exports = cms;
